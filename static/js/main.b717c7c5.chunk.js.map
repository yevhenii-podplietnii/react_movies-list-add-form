{"version":3,"sources":["components/TextField/TextField.tsx","components/NewMovie/NewMovie.tsx","components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","App.tsx","index.tsx"],"names":["TextField","name","value","label","required","onChange","useState","Math","random","toString","slice","id","touched","setToched","hasError","className","htmlFor","classNames","type","placeholder","event","target","onBlur","NewMovie","onAdd","count","setCount","title","setTitle","description","setDescription","imgUrl","setImgUrl","imdbUrl","setImdbUrl","imdbId","setImdbId","handleChange","setState","isError","trim","onSubmit","preventDefault","disabled","MovieCard","movie","src","alt","href","MoviesList","movies","map","App","moviesFromServer","moviesList","setMoviesList","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b717c7c5.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport React, { useState } from 'react';\n\ntype Props = {\n  name: string,\n  value: string,\n  label?: string,\n  required?: boolean,\n  onChange?: (newValue: string) => void,\n};\n\nfunction getRandomDigits() {\n  return Math.random().toString().slice(2);\n}\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  required = false,\n  onChange = () => {},\n}) => {\n  // generage a unique id once on component load\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n\n  // To show errors only if the field was touched (onBlur)\n  const [touched, setToched] = useState(false);\n  const hasError = touched && required && !value;\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': hasError,\n          })}\n          type=\"text\"\n          placeholder={`Enter ${label}`}\n          value={value}\n          onChange={event => onChange(event.target.value)}\n          onBlur={() => setToched(true)}\n        />\n      </div>\n\n      {hasError && (\n        <p className=\"help is-danger\">{`${label} is required`}</p>\n      )}\n    </div>\n  );\n};\n","import { FormEvent, useState } from 'react';\nimport { TextField } from '../TextField';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  onAdd: (movie: Movie) => void,\n};\n\nexport const NewMovie: React.FC<Props> = ({ onAdd }) => {\n  const [count, setCount] = useState(0);\n  const [title, setTitle] = useState('');\n  const [description, setDescription] = useState('');\n  const [imgUrl, setImgUrl] = useState('');\n  const [imdbUrl, setImdbUrl] = useState('');\n  const [imdbId, setImdbId] = useState('');\n\n  const handleSubmit = (event: FormEvent) => {\n    event.preventDefault();\n\n    setCount(count + 1);\n\n    onAdd({\n      title,\n      description,\n      imgUrl,\n      imdbUrl,\n      imdbId,\n    });\n\n    setTitle('');\n    setDescription('');\n    setImgUrl('');\n    setImdbUrl('');\n    setImdbId('');\n  };\n\n  const handleChange = (setState: (value: string) => void,\n    value: string): void => {\n    setState(value);\n  };\n\n  const isError = !title.trim()\n    || !imgUrl.trim()\n    || !imdbUrl.trim()\n    || !imdbId.trim();\n\n  return (\n    <form\n      className=\"NewMovie\"\n      key={count}\n      onSubmit={handleSubmit}\n    >\n      <h2 className=\"title\">Add a movie</h2>\n\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        value={title}\n        onChange={value => handleChange(setTitle, value)}\n        required\n      />\n\n      <TextField\n        name=\"description\"\n        label=\"Description\"\n        value={description}\n        onChange={value => handleChange(setDescription, value)}\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        label=\"Image URL\"\n        value={imgUrl}\n        onChange={value => handleChange(setImgUrl, value)}\n        required\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        label=\"Imdb URL\"\n        value={imdbUrl}\n        onChange={value => handleChange(setImdbUrl, value)}\n        required\n      />\n\n      <TextField\n        name=\"imdbId\"\n        label=\"Imdb ID\"\n        value={imdbId}\n        onChange={value => handleChange(setImdbId, value)}\n        required\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            disabled={isError}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import { useState } from 'react';\nimport './App.scss';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\nimport { Movie } from './types/Movie';\nimport { MoviesList } from './components/MoviesList';\n\nexport const App = () => {\n  const [moviesList, setMoviesList] = useState(moviesFromServer);\n  const addNewMovie = (movie: Movie) => setMoviesList([...moviesList, movie]);\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={moviesList} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie onAdd={addNewMovie} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}